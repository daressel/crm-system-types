enum SortType {
  asc
  desc
}

enum MemberStatus {
  SEND_INVITE
  DEACTIVATED
  ACTIVE
}

input MemberStatusFilter {
  equals: MemberStatus
  in: [MemberStatus!]
  not: MemberStatus
  notIn: [MemberStatus!]
}

input ProjectClientStatusFilter {
  equals: ProjectClientStatus
  in: [ProjectClientStatus!]
  not: ProjectClientStatus
  notIn: [ProjectClientStatus!]
}

input ProjectStatusFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  not: ProjectStatus
  notIn: [ProjectStatus!]
}

enum Language {
  EN
  AR
  DE
  AL
  CZ
  CH
  HU
  GR
  NO
  CN
  BG
  KH
  PT
  RO
  KR
  SE
  TH
  PL
  FR
  ES
  IT
  RU
  TR
  JP
  NL
  HR
  DK
  IL
  VN
}

enum StageStatus {
  COMPLETED
  WORKING
  NOT_STARTED
}

scalar Date

input DateFilter {
  equals: Date
  in: [Date!]
  notIn: [Date!]
  lt: Date
  lte: Date
  gt: Date
  gte: Date
  not: Date
}

type Token {
  token: String!
}

type Query {
  undefined: String
}

type Mutation {
  undefined: String
}

type Subscription {
  undefined: String
}

input UniqueInput {
  id: ID!
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

input BoolFilter {
  equals: Boolean
  not: Boolean
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: Int
}

input LanguageFilter {
  equals: [Language!]
  has: Language
  hasEvery: [Language!]
  hasSome: [Language!]
  isEmpty: Boolean
}

type BatchPayload {
  count: Int!
}

input StageStatusFilter {
  equals: StageStatus
  in: [StageStatus!]
  not: StageStatus
  notIn: [StageStatus!]
}

enum ProjectUserStatus {
  SEND_INVITE
  DEACTIVATED
  ACTIVE
  DRAFT
}
