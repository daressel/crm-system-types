extend type Query {
  product(where: UniqueInput): Product
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    take: Int
    skip: Int
  ): Products

  isExistProduct(where: ProductWhereInput): Boolean
}

extend type Mutation {
  createProducts(data: [ProductCreateInput!]!): BatchPayload
  updateProducts(
    where: ProductWhereInput
    data: ProductUpdateInput!
  ): BatchPayload
  deleteProducts(where: ProductWhereInput): BatchPayload
}

type Product {
  id: ID
  title: String
  price: Int
  amount: Int
  discount: Int
  tax: Int

  withTax: Boolean
  isSet: Boolean

  studio: Studio
  studioId: ID

  createdAt: Date
  updatedAt: Date
}

type Products {
  products: [Product!]
  count(where: ProductWhereInput): Int
}

input ProductRelation {
  some: ProductWhereInput
  every: ProductWhereInput
  none: ProductWhereInput
}

extend type Studio {
  products(
    where: ProductWhereInput
    orderBy: ProductOrderByInput
    take: Int
    skip: Int
  ): Products
}

extend input StudioWhereInput {
  products: ProductRelation
}

input ProductWhereInput {
  id: StringFilter
  title: StringFilter
  price: IntFilter
  amount: IntFilter
  discount: IntFilter
  tax: IntFilter

  withTax: BoolFilter
  isSet: BoolFilter

  studio: StudioWhereInput
  studioId: StringFilter

  createdAt: StringFilter
  updatedAt: StringFilter

  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductOrderByInput {
  id: SortType
  title: SortType
  price: SortType
  amount: SortType
  discount: SortType
  tax: SortType

  withTax: SortType
  isSet: SortType

  studio: StudioOrderByInput
  studioId: SortType

  createdAt: SortType
  updatedAt: SortType
}

input ProductCreateInput {
  title: String!
  price: Int!
  amount: Int
  discount: Int
  tax: Int

  productItems: ProductItemConnection

  withTax: Boolean
  isSet: Boolean
}

input ProductUpdateInput {
  title: String
  price: Int
  amount: Int
  discount: Int
  tax: Int

  withTax: Boolean
  isSet: Boolean
}

input ProductsConnection {
  create: [ProductCreateInput!]
  connectOrCreate: [ProductConnectOrCreateInput!]
  connect: [UniqueInput!]
}

input ProductConnection {
  create: ProductCreateInput
  connectOrCreate: ProductConnectOrCreateInput
  connect: UniqueInput
}

input ProductConnectOrCreateInput {
  where: UniqueInput!
  create: ProductCreateInput!
}
